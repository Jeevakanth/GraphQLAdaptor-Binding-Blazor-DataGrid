(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["sf-circulargauge"],{

/***/ "./bundles/sf-circulargauge.js":
/*!*************************************!*\
  !*** ./bundles/sf-circulargauge.js ***!
  \*************************************/
/*! no exports provided */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _modules_sf_circulargauge_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../modules/sf-circulargauge.js */ "./modules/sf-circulargauge.js");
/* harmony import */ var _modules_sf_circulargauge_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_modules_sf_circulargauge_js__WEBPACK_IMPORTED_MODULE_0__);


/***/ }),

/***/ "./modules/sf-circulargauge.js":
/*!*************************************!*\
  !*** ./modules/sf-circulargauge.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

window.sfBlazor = window.sfBlazor || {};
window.sfBlazor.CircularGauge = function () {
  'use strict';

  /* eslint-disable @typescript-eslint/naming-convention */
  /* eslint-disable @typescript-eslint/member-delimiter-style */
  /* eslint-disable max-len */
  var SfCircularGauge = /** @class */function () {
    // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
    function SfCircularGauge(id, element, options, dotnetRef) {
      window.sfBlazor = window.sfBlazor;
      this.isTouch = false;
      this.id = id;
      this.element = element;
      this.dotNetRef = dotnetRef;
      this.options = options;
      this.dataId = id;
      window.sfBlazor.setCompInstance(this);
    }
    SfCircularGauge.prototype.render = function () {
      this.wireEvents();
    };
    SfCircularGauge.prototype.wireEvents = function () {
      /*! Bind the Event handler */
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchStartEvent, this.gaugeOnMouseDown, this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchMoveEvent, this.gaugeOnMouseMove, this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchEndEvent, this.gaugeOnMouseEnd, this);
      sf.base.EventHandler.add(this.element, sf.base.Browser.touchCancelEvent, this.gaugeOnMouseEnd, this);
      sf.base.EventHandler.add(this.element, 'click', this.gaugeOnMouseClick, this);
      window.addEventListener(sf.base.Browser.isTouch && 'orientation' in window && 'onorientationchange' in window ? 'orientationchange' : 'resize', this.gaugeOnResize.bind(this));
    };
    SfCircularGauge.prototype.destroy = function () {
      this.dotNetRef = null;
    };
    SfCircularGauge.prototype.gaugeOnMouseClick = function (e) {
      var legendItemsId = ['_Text_', '_Shape_'];
      var targetId = e.target.id;
      if (targetId.indexOf('Legend') !== -1 && this.options.legendToggleVisibility) {
        for (var i = 0; i < legendItemsId.length; i++) {
          var id = legendItemsId[i];
          if (targetId.indexOf(id) !== -1) {
            // eslint-disable-next-line radix
            var axisIndex = parseInt(targetId.split(this.element.id + '_Legend_Axis_')[1].split(id)[0]);
            // eslint-disable-next-line radix
            var rangeIndex = parseInt(targetId.split(this.element.id + '_Legend_Axis_')[1].split(id)[1]);
            if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
              this.dotNetRef.invokeMethodAsync('TriggerLegendClick', axisIndex, rangeIndex);
            }
          }
        }
      }
    };
    SfCircularGauge.prototype.gaugeOnResize = function () {
      var width;
      var height;
      if (!sf.base.isNullOrUndefined(this.element)) {
        var svgElement = document.getElementById(this.element.id + '_svg');
        if (!sf.base.isNullOrUndefined(svgElement)) {
          svgElement.style.display = 'none';
          var elementRect = this.element.getBoundingClientRect();
          width = elementRect.width;
          height = elementRect.height;
          svgElement.style.removeProperty('display');
        }
      }
      if (this.previousHeight !== height || this.previousWidth !== width) {
        this.previousHeight = height;
        this.previousWidth = width;
        if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
          this.dotNetRef.invokeMethodAsync('TriggerResizeEvent', width, height);
        }
      }
    };
    SfCircularGauge.prototype.gaugeOnMouseDown = function (e) {
      var pageText = document.getElementById(this.element.id + '_legend_pagenumber');
      var targetId = e.target.id;
      var clientX = 0;
      var clientY = 0;
      if (e.type === 'touchstart') {
        this.isTouch = true;
        clientX = e['touches'][0].clientX;
        clientY = e['touches'][0].clientY;
      } else {
        this.isTouch = false;
        clientX = e.pageX;
        clientY = e.pageY;
      }
      if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
        this.dotNetRef.invokeMethodAsync('TriggerMouseDownEvent', clientX, clientY);
      }
      if (!sf.base.isNullOrUndefined(pageText)) {
        var page = parseInt(pageText.textContent.split('/')[0], 10);
        if (targetId.indexOf(this.element.id + '_legend_pageup') > -1 && !sf.base.isNullOrUndefined(this.dotNetRef)) {
          this.dotNetRef.invokeMethodAsync('TriggerLegendPageClick', page - 2, page - 1);
        } else if (targetId.indexOf(this.element.id + '_legend_pagedown') > -1 && !sf.base.isNullOrUndefined(this.dotNetRef)) {
          this.dotNetRef.invokeMethodAsync('TriggerLegendPageClick', page, page + 1);
        }
      }
      if ((this.options.enablePointerDrag || this.options.enableRangeDrag) && (event.target.id.indexOf('Pointer') !== -1 || event.target.id.indexOf('_Range_') !== -1)) {
        e.preventDefault();
        this.isMouseDown = true;
        var tempString = targetId.replace(this.element.id, '').split('_Axis_')[1];
        this.dragAxisIndex = +tempString[0];
        this.dragElementIndex = +tempString[tempString.length - 1];
        if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
          if (event.target.id.indexOf('Pointer') !== -1) {
            this.isPointerDrag = true;
            this.dotNetRef.invokeMethodAsync('TriggerDragStart', this.dragAxisIndex, this.dragElementIndex, 0, 'Pointer');
          } else {
            this.isRangeDrag = true;
            this.dotNetRef.invokeMethodAsync('TriggerDragStart', this.dragAxisIndex, 0, this.dragElementIndex, 'Range');
          }
        }
      }
    };
    SfCircularGauge.prototype.gaugeOnMouseMove = function (e) {
      var tempString;
      var axisIndex;
      var pointerIndex;
      var moveClientX;
      var moveClientY;
      var targetElementId = e.target.id;
      if (e.type === 'touchmove') {
        moveClientX = e['touches'][0].clientX;
        moveClientY = e['touches'][0].clientY;
      } else {
        moveClientX = e.clientX;
        moveClientY = e.clientY;
      }
      var svgElement = document.getElementById(this.element.id + '_svg');
      var svgRect = svgElement.getBoundingClientRect();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var rect = this.element.getBoundingClientRect();
      var mouseY = moveClientY - rect.top - Math.max(svgRect.top - rect.top, 0);
      var mouseX = moveClientX - rect.left - Math.max(svgRect.left - rect.left, 0);
      if (targetElementId.indexOf('Legend') !== -1) {
        var legendElement = document.getElementById(targetElementId);
        if (this.options.legendToggleVisibility) {
          legendElement.setAttribute('cursor', 'pointer');
        } else {
          legendElement.setAttribute('cursor', 'auto');
        }
      }
      var tooltipGroup = document.getElementById(this.element.id + '_Tooltip');
      var tooltipGroupElement = document.getElementById(this.element.id + '_Tooltip_Group');
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var parentElement = e.target.parentElement || e.target.parentNode;
      var parentTargetId = parentElement.id;
      if (targetElementId.indexOf('Pointer') !== -1 && (sf.base.isNullOrUndefined(this.options.tooltipType) || this.options.tooltipType.indexOf('Pointer') !== -1)) {
        tempString = targetElementId.replace(this.element.id, '').split('_Axis_')[1];
        axisIndex = +tempString[0];
        pointerIndex = +tempString[tempString.length - 1];
      }
      this.performDragOperation(targetElementId, axisIndex, pointerIndex, mouseX, mouseY, event);
      var type = parentTargetId.indexOf("Annotation") > -1 ? "Annotation" : targetElementId.indexOf("Pointer") > -1 ? "Pointer" : targetElementId.indexOf("_Range_") > -1 ? "Range" : targetElementId.indexOf("_CircularGaugeTitle") > -1 && event.target.textContent.indexOf('...') > -1 ? "Title" : targetElementId.indexOf('Legend') !== -1 && targetElementId.indexOf("_Text_") > -1 && event.target.textContent.indexOf('...') > -1 ? "Legend" : "";
      this.gaugeTooltip(targetElementId, parentTargetId, moveClientX, moveClientY, tooltipGroupElement, tooltipGroup, rect, svgRect, svgElement, type);
      if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
        if (targetElementId.indexOf('_CircularGaugeBorder') > -1) {
          this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', moveClientX, moveClientY, 0, 0, 0, false, false, false, false, false, rect);
        }
      }
    };
    SfCircularGauge.prototype.gaugeTooltip = function (targetElementId, parentTargetId, moveClientX, moveClientY, tooltipGroupElement, tooltipGroup, rect, svgRect, svgElement, tooltipType) {
      var _this = this;
      if (this.options.enableTooltip && tooltipType !== "Title" && tooltipType !== "Legend") {
        var tempString = void 0;
        var axisIndex = 0;
        var pointerIndex = 0;
        if (tooltipType === "Annotation") {
          rect = {
            left: Math.abs(rect.left - svgRect.left),
            top: Math.abs(rect.top - svgRect.top),
            width: svgRect.width,
            height: svgRect.height,
            x: Math.abs(rect.left - svgRect.left),
            y: Math.abs(rect.top - svgRect.top),
            bottom: 0,
            right: 0
          };
          if ((targetElementId.indexOf('Annotation') !== -1 || parentTargetId.indexOf('Annotation') !== -1) && !sf.base.isNullOrUndefined(this.options.tooltipType) && this.options.tooltipType.indexOf('Annotation') !== -1) {
            var index = void 0;
            if (parentTargetId.indexOf('ContentTemplate') !== -1) {
              var annotIndexString = parentTargetId.split('_ContentTemplate')[0];
              index = annotIndexString[annotIndexString.length - 1];
            }
            var annotationTemplateElement = document.getElementById(parentTargetId);
            tempString = annotationTemplateElement.id.replace(this.element.id, '').split('_Axis_')[1];
            axisIndex = +tempString[0];
            pointerIndex = +(parentTargetId.indexOf('ContentTemplate') === -1 ? tempString[tempString.length - 1] : index);
            pointerIndex = isNaN(pointerIndex) ? 0 : pointerIndex;
            var annotationidElement = void 0;
            if (tooltipGroupElement !== null) {
              if (tooltipGroup.lastElementChild !== null) {
                var annotationIndexId = this.element.id + '_Tooltip_Annotation_' + pointerIndex + '_Content';
                annotationidElement = document.getElementById(annotationIndexId);
                var elementExist = document.querySelectorAll('#' + annotationIndexId);
              }
            }
            var annotElementWidth = annotationTemplateElement.getBoundingClientRect().width;
            if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
              clearTimeout(this.tooltipTimer);
              this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', moveClientX + annotElementWidth / 2, moveClientY, axisIndex, pointerIndex, 0, false, false, true, false, false, rect);
              if (this.isTouch) {
                this.tooltipTimer = setTimeout(function () {
                  _this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
                }, 1500);
              }
            }
          }
        } else if (tooltipType === "Pointer") {
          if (targetElementId.indexOf('Pointer') !== -1 || targetElementId.indexOf('_Range_') !== -1 || targetElementId.indexOf('Annotation') !== -1 || parentTargetId.indexOf('Annotation') !== -1 && targetElementId.indexOf('Annotation') === -1) {
            if (targetElementId.indexOf('Pointer') !== -1 && (sf.base.isNullOrUndefined(this.options.tooltipType) || this.options.tooltipType.indexOf('Pointer') !== -1)) {
              tempString = targetElementId.replace(this.element.id, '').split('_Axis_')[1];
              axisIndex = +tempString[0];
              pointerIndex = +tempString[tempString.length - 1];
              var tooltipX = 0;
              var tooltipY = 0;
              if (this.options.showPointerTooltipAtMousePosition) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                var mousePosition = this.getMousePosition(moveClientX, moveClientY, svgElement);
                tooltipX = mousePosition.x;
                tooltipY = mousePosition.y;
              } else {
                tooltipX = moveClientX;
                tooltipY = moveClientY;
              }
              if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
                clearTimeout(this.tooltipTimer);
                this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', tooltipX, tooltipY, axisIndex, pointerIndex, 0, false, true, false, false, false, rect);
                if (this.isTouch) {
                  this.tooltipTimer = setTimeout(function () {
                    _this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
                  }, 1500);
                }
              }
            }
          }
        } else if (tooltipType === "Range") {
          if (targetElementId.indexOf('_Range_') !== -1 && !sf.base.isNullOrUndefined(this.options.tooltipType) && this.options.tooltipType.indexOf('Range') !== -1 && !this.isMouseDown) {
            tempString = targetElementId.replace(this.element.id, '').split('_Axis_')[1];
            axisIndex = +tempString[0];
            pointerIndex = +tempString[tempString.length - 1];
            var tooltipX = 0;
            var tooltipY = 0;
            if (this.options.showRangeTooltipAtMousePosition) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              var mousePosition = this.getMousePosition(moveClientX, moveClientY, svgElement);
              tooltipX = mousePosition.x;
              tooltipY = mousePosition.y;
            } else {
              tooltipX = moveClientX;
              tooltipY = moveClientY;
            }
            if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
              clearTimeout(this.tooltipTimer);
              this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', tooltipX, tooltipY, axisIndex, pointerIndex, 0, true, false, false, false, false, rect);
              if (this.isTouch) {
                this.tooltipTimer = setTimeout(function () {
                  _this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
                }, 1500);
              }
            }
          }
        } else if ((tooltipGroup !== null || tooltipGroupElement && tooltipGroupElement.childElementCount > 0) && !this.isPointerDrag) {
          this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
        }
      } else if (tooltipType === "Title") {
        if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
          clearTimeout(this.tooltipTimer);
          this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, true, false, rect);
          if (this.isTouch) {
            this.tooltipTimer = setTimeout(function () {
              _this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
            }, 1500);
          }
        }
      } else if (tooltipType === "Legend") {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var mousePosition = this.getMousePosition(moveClientX, moveClientY, svgElement);
        clearTimeout(this.tooltipTimer);
        this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', mousePosition.x, mousePosition.y, 0, 0, parseInt(targetElementId.split("_Text_")[1]), false, false, false, false, true, rect);
        if (this.isTouch) {
          this.tooltipTimer = setTimeout(function () {
            _this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
          }, 1500);
        }
      } else if (!this.isPointerDrag) {
        this.dotNetRef.invokeMethodAsync('TriggerTooltipEvent', 0, 0, 0, 0, 0, false, false, false, false, false, rect);
      }
    };
    SfCircularGauge.prototype.performDragOperation = function (targetElementId, axisIndex, pointerIndex, mouseX, mouseY, event) {
      if (this.options.enablePointerDrag && targetElementId.indexOf('Pointer') !== -1 || this.options.enableRangeDrag && targetElementId.indexOf('_Range_') !== -1 || this.isMouseDown) {
        if (this.isMouseDown) {
          event.preventDefault();
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          var currentTime = new Date();
          if (axisIndex !== null && pointerIndex !== null && this.isMouseDown) {
            var isTouch = event.type === 'touchmove';
            if (this.isRangeDrag && this.options.enableRangeDrag && !sf.base.isNullOrUndefined(this.dotNetRef)) {
              document.getElementById(this.element.id + '_svg').setAttribute('cursor', 'grabbing');
              this.dotNetRef.invokeMethodAsync('TriggerRangeDragEvent', mouseX, mouseY, this.dragAxisIndex, this.dragElementIndex, isTouch);
            } else if (this.isPointerDrag && this.options.enablePointerDrag && (sf.base.isNullOrUndefined(this.dragMilliseconds) || Math.abs(currentTime.getMilliseconds() - this.dragMilliseconds) > 100) && !sf.base.isNullOrUndefined(this.dotNetRef)) {
              this.dragMilliseconds = currentTime.getMilliseconds();
              document.getElementById(this.element.id + '_svg').setAttribute('cursor', 'grabbing');
              this.dotNetRef.invokeMethodAsync('TriggerDragEvent', mouseX, mouseY, this.dragAxisIndex, this.dragElementIndex, isTouch);
            }
          }
        } else {
          document.getElementById(this.element.id + '_svg').setAttribute('cursor', 'pointer');
        }
      } else {
        document.getElementById(this.element.id + '_svg').setAttribute('cursor', 'auto');
      }
    };
    SfCircularGauge.prototype.gaugeOnMouseEnd = function (e) {
      var clientX = 0;
      var clientY = 0;
      this.dragMilliseconds = null;
      var targetId = e.target.id;
      if (e.type === 'touchend') {
        var touchArg = e;
        clientX = touchArg.changedTouches[0].pageX;
        clientY = touchArg.changedTouches[0].pageY;
        this.isTouch = true;
      } else {
        this.isTouch = false;
        clientX = e.clientX;
        clientY = e.clientY;
      }
      if (this.isTouch) {
        var svgElement = document.getElementById(this.element.id + '_svg');
        var svgRect = svgElement.getBoundingClientRect();
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var rect = this.element.getBoundingClientRect();
        var parentElement = e.target.parentElement || e.target.parentNode;
        var parentTargetId = parentElement.id;
        var tooltipGroup = document.getElementById(this.element.id + '_Tooltip');
        var tooltipGroupElement = document.getElementById(this.element.id + '_Tooltip_Group');
        this.isMouseDown = false;
        var type = parentTargetId.indexOf("Annotation") > -1 ? "Annotation" : targetId.indexOf("Pointer") > -1 ? "Pointer" : targetId.indexOf("_Range_") > -1 ? "Range" : targetId.indexOf("_CircularGaugeTitle") > -1 && e.target.textContent.indexOf('...') > -1 ? "Title" : targetId.indexOf('Legend') !== -1 && targetId.indexOf("_Text_") > -1 && e.target.textContent.indexOf('...') > -1 ? "Legend" : "";
        this.gaugeTooltip(targetId, parentTargetId, clientX, clientY, tooltipGroupElement, tooltipGroup, rect, svgRect, svgElement, type);
      }
      if (!sf.base.isNullOrUndefined(this.dotNetRef)) {
        if (this.isTouch || e.type == 'mouseup') {
          this.dotNetRef.invokeMethodAsync('TriggerMouseUpEvent', clientX, clientY);
        } else {
          this.dotNetRef.invokeMethodAsync('TriggerMouseLeaveEvent', clientX, clientY);
        }
        if (this.isPointerDrag) {
          this.dotNetRef.invokeMethodAsync('TriggerDragEnd', this.dragAxisIndex, this.dragElementIndex, 0, 'Pointer');
        } else if (this.isRangeDrag) {
          this.dotNetRef.invokeMethodAsync('TriggerDragEnd', this.dragAxisIndex, 0, this.dragElementIndex, 'Range');
        }
      }
      this.isMouseDown = false;
      this.isPointerDrag = false;
      this.isRangeDrag = false;
    };
    SfCircularGauge.prototype.animationRangeProcess = function (animatedChildElements, options, axisIndex, pointerIndex) {
      var _this = this;
      var sweepAngle;
      new sf.base.Animation({}).animate(animatedChildElements, {
        duration: options.duration,
        progress: function progress(args) {
          sweepAngle = _this.animationRangeProgress(sweepAngle, options, args, animatedChildElements);
        },
        end: function end(args) {
          if (!options.isClockWise) {
            var tempAngle = options.endAngle;
            options.endAngle = options.minimumAngle;
            options.minimumAngle = tempAngle;
          }
          if (options.roundRadius != 0 && options.end != options.minimumAxis) {
            var roundedRadius = options.roundRadius;
            var minimumRadius = options.roundRadius * 0.25;
            if (options.end <= minimumRadius) {
              roundedRadius = options.end < 6 ? 8 : roundedRadius;
              roundedRadius /= 2;
              minimumRadius = roundedRadius * 0.25;
            }
            var previousStartValue = ((options.radius - options.pointerWidth / 2) * (options.minimumAngle * Math.PI / 180) - roundedRadius / minimumRadius) / (options.radius - options.pointerWidth / 2) * 180 / Math.PI;
            var previousEndValue = ((options.radius - options.pointerWidth / 2) * (options.endAngle * Math.PI / 180) + roundedRadius / minimumRadius) / (options.radius - options.pointerWidth / 2) * 180 / Math.PI;
            var roundStartAngle = options.radius * (options.minimumAngle * Math.PI / 180) / options.radius * 180 / Math.PI;
            var roundEndAngle = options.radius * (options.endAngle * Math.PI / 180) / options.radius * 180 / Math.PI;
            roundEndAngle = options.end > 0 ? roundEndAngle : roundEndAngle - roundedRadius / 3;
            roundStartAngle = options.end > 0 ? roundStartAngle : roundStartAngle + roundedRadius / 3;
            animatedChildElements.setAttribute('d', _this.getRoundedPathArc({
              x: options.midPointX,
              y: options.midPointY
            }, Math.floor(roundStartAngle), roundEndAngle, Math.floor(previousStartValue), Math.floor(previousEndValue), options.radius, options.pointerWidth, options.pointerWidth, Math.abs(options.roundRadius)));
          } else {
            animatedChildElements.setAttribute('d', _this.getCompletePathArc({
              x: options.midPointX,
              y: options.midPointY
            }, options.minimumAngle, options.endAngle, options.radius, options.innerRadius, options.isClockWise));
          }
          if (_this.options.isAnimationEvent && options.start != options.end) {
            !sf.base.isNullOrUndefined(_this.dotNetRef) ? _this.dotNetRef.invokeMethodAsync('AnimatePointer', axisIndex, pointerIndex, options.end) : null;
          }
        }
      });
    };
    // eslint-disable-next-line max-len
    SfCircularGauge.prototype.animationProcess = function (animatedChildElements, options, axisIndex, pointerIndex) {
      var _this = this;
      var sweepAngle;
      new sf.base.Animation({}).animate(animatedChildElements, {
        duration: options.duration,
        progress: function progress(args) {
          sweepAngle = _this.animationProgress(sweepAngle, options, args, animatedChildElements);
        },
        end: function end(args) {
          animatedChildElements.setAttribute('transform', 'rotate(' + options.endAngle + ',' + options.midPointX + ',' + options.midPointY + ')');
          if (_this.options.isAnimationEvent && options.start != options.end) {
            !sf.base.isNullOrUndefined(_this.dotNetRef) ? _this.dotNetRef.invokeMethodAsync('AnimatePointer', axisIndex, pointerIndex, options.end) : null;
          }
        }
      });
    };
    SfCircularGauge.prototype.animationProgress = function (sweepAngle, options, args, animatedChildElements) {
      sweepAngle = options.start < options.end || Math.round(options.startAngle) === Math.round(options.endAngle) ? options.isClockWise ? options.endAngle - options.startAngle : options.start === options.end ? options.endAngle - options.startAngle : options.endAngle - options.startAngle - 360 : options.isClockWise ? options.endAngle - options.startAngle - 360 : options.endAngle - options.startAngle;
      animatedChildElements.style.animation = 'None';
      animatedChildElements.setAttribute('transform', 'rotate(' + (-sweepAngle * Math.cos(args.timeStamp / args.duration * (Math.PI / 2)) + sweepAngle + options.startAngle) + ',' + options.midPointX + ',' + options.midPointY + ')');
      return sweepAngle;
    };
    SfCircularGauge.prototype.animationRangeProgress = function (sweepAngle, options, args, animatedChildElements) {
      sweepAngle = options.start < options.end || Math.round(options.startAngle) === Math.round(options.endAngle) ? options.isClockWise ? options.endAngle - options.startAngle : options.start === options.end ? options.endAngle - options.startAngle : options.endAngle - options.startAngle - 360 : options.isClockWise ? options.endAngle - options.startAngle - 360 : options.endAngle - options.startAngle;
      animatedChildElements.style.animation = 'None';
      var rangeLinear;
      var roundedActualEnd;
      var roundedOldEnd;
      if (options.roundRadius <= 0) {
        rangeLinear = -sweepAngle * Math.cos(args.timeStamp / options.duration * (Math.PI / 2)) + sweepAngle + options.startAngle;
      }
      if (options.isClockWise) {
        if (options.roundRadius > 0 && options.end != options.minimumAxis) {
          roundedActualEnd = -sweepAngle * Math.cos(args.timeStamp / options.duration * (Math.PI / 2)) + sweepAngle + Math.floor(options.startAngle);
          roundedOldEnd = -sweepAngle * Math.cos(args.timeStamp / options.duration * (Math.PI / 2)) + sweepAngle + Math.floor(options.startAngle + Math.abs(options.roundRadius) / 2);
          animatedChildElements.setAttribute('d', this.getRoundedPathArc({
            x: options.midPointX,
            y: options.midPointY
          }, Math.floor(options.minimumAngle), roundedActualEnd + 0.0001, Math.floor(options.oldStart), Math.floor(roundedOldEnd + 0.0001), options.radius, options.pointerWidth, options.pointerWidth, Math.abs(options.roundRadius)));
        } else {
          animatedChildElements.setAttribute('d', this.getCompletePathArc({
            x: options.midPointX,
            y: options.midPointY
          }, options.minimumAngle, rangeLinear + 0.0001, options.radius, options.innerRadius, false));
        }
      } else {
        if (options.roundRadius > 0 && options.end != options.minimumAxis) {
          roundedActualEnd = -sweepAngle * Math.cos(args.timeStamp / options.duration * (Math.PI / 2)) + sweepAngle + Math.floor(options.startAngle);
          roundedOldEnd = -sweepAngle * Math.cos(args.timeStamp / options.duration * (Math.PI / 2)) + sweepAngle + Math.floor(options.startAngle - Math.abs(options.roundRadius) / 2);
          animatedChildElements.setAttribute('d', this.getRoundedPathArc({
            x: options.midPointX,
            y: options.midPointY
          }, roundedActualEnd, options.minimumAngle + 0.0001, roundedOldEnd, Math.floor(options.oldStart + Math.abs(options.roundRadius)), options.radius, options.pointerWidth, options.pointerWidth, Math.abs(options.roundRadius)));
        } else {
          animatedChildElements.setAttribute('d', this.getCompletePathArc({
            x: options.midPointX,
            y: options.midPointY
          }, rangeLinear, options.minimumAngle + 0.0001, options.radius, options.innerRadius, false));
        }
      }
      return sweepAngle;
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    SfCircularGauge.prototype.pointerAnimation = function (options) {
      var animationElement = document.getElementById(options.id);
      var tempString = animationElement.id.replace(this.element.id, '').split('_Axis_')[1];
      var axisIndex = +tempString[0];
      var pointerIndex = +tempString[tempString.length - 1];
      var childCount = sf.base.Browser.isIE ? animationElement.childNodes.length : animationElement.childElementCount;
      for (var j = 0; j < childCount; j++) {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var animatedChildElements = sf.base.Browser.isIE ? animationElement.childNodes[j] : animationElement.children[j];
        if (animatedChildElements.nodeName === '#comment') {
          continue;
        }
        if (options.pointerType === 'RangeBar') {
          this.animationRangeProcess(animatedChildElements, options, axisIndex, pointerIndex);
        } else if (options.isMarkerShapeText) {
          this.performTextAnimation(animatedChildElements, options, axisIndex, pointerIndex);
        } else {
          this.animationProcess(animatedChildElements, options, axisIndex, pointerIndex);
        }
      }
    };
    SfCircularGauge.prototype.performTextAnimation = function (animatedChildElements, options, axisIndex, pointerIndex) {
      var _this = this;
      var textAngle;
      var textlocation;
      var pointerValue;
      var timeStamp;
      var val = Math.abs(options.start - options.end);
      new sf.base.Animation({}).animate(animatedChildElements, {
        duration: options.duration,
        progress: function progress(args) {
          timeStamp = args.timeStamp / options.duration;
          pointerValue = options.end > options.start ? options.start + timeStamp * val : options.start - timeStamp * val;
          textAngle = _this.getAngleFromValue(pointerValue, options.maximumAxis, options.minimumAxis, options.axisStartAngle, options.axisEndAngle, options.isClockWise);
          textlocation = _this.getLocationFromAngle(textAngle, options.radius, {
            x: options.midPointX,
            y: options.midPointY
          });
          animatedChildElements.setAttribute('transform', 'rotate(' + (textAngle + 90) + ', ' + textlocation.x + ', ' + textlocation.y + ')');
          animatedChildElements.setAttribute('x', String(textlocation.x));
          animatedChildElements.setAttribute('y', String(textlocation.y));
          animatedChildElements['style']['visibility'] = 'visible';
        },
        end: function end(args) {
          textAngle = _this.getAngleFromValue(options.pointerValue, options.maximumAxis, options.minimumAxis, options.axisStartAngle, options.axisEndAngle, options.isClockWise);
          textlocation = _this.getLocationFromAngle(textAngle, options.radius, {
            x: options.midPointX,
            y: options.midPointY
          });
          animatedChildElements.setAttribute('transform', 'rotate(' + (textAngle + 90) + ',' + textlocation.x + ',' + textlocation.y + ')');
          animatedChildElements.setAttribute('x', String(textlocation.x));
          animatedChildElements.setAttribute('y', String(textlocation.y));
          if (_this.options.isAnimationEvent && options.start != options.end) {
            !sf.base.isNullOrUndefined(_this.dotNetRef) ? _this.dotNetRef.invokeMethodAsync('AnimatePointer', axisIndex, pointerIndex, options.end) : null;
          }
        }
      });
    };
    SfCircularGauge.prototype.getAngleFromValue = function (value, maximumValue, minimumValue, startAngle, endAngle, isClockWise) {
      var angle;
      endAngle -= this.isCompleteAngle(startAngle, endAngle) ? 0.0001 : 0;
      startAngle -= 90;
      endAngle -= 90;
      if (isClockWise) {
        angle = (value - minimumValue) * (this.getDegreeValue(startAngle, endAngle) / (maximumValue - minimumValue)) + startAngle;
      } else {
        angle = endAngle - (value - minimumValue) * (this.getDegreeValue(startAngle, endAngle) / (maximumValue - minimumValue));
        angle = angle < 0 ? 360 + angle : angle;
      }
      angle = Math.round(angle) >= 360 ? angle - 360 : Math.round(angle) < 0 ? 360 + angle : angle;
      return angle;
    };
    SfCircularGauge.prototype.isCompleteAngle = function (startAngle, endAngle) {
      var totalAngle = endAngle - startAngle;
      totalAngle = totalAngle <= 0 ? totalAngle + 360 : totalAngle;
      return Math.floor(totalAngle / 360) != 0;
    };
    SfCircularGauge.prototype.getDegreeValue = function (startAngle, endAngle) {
      var degreeValue = endAngle - startAngle;
      return degreeValue < 0 ? degreeValue + 360 : degreeValue;
    };
    SfCircularGauge.prototype.getLocationFromAngle = function (degree, radius, center) {
      var radian = degree * Math.PI / 180;
      return {
        x: Math.cos(radian) * radius + center.x,
        y: Math.sin(radian) * radius + center.y
      };
    };
    SfCircularGauge.prototype.getCompletePath = function (start, end, radius, innerStart, innerEnd, innerRadius, clockWise) {
      return 'M ' + start.x + ' ' + start.y + ' A ' + radius + ' ' + radius + ' 0 ' + clockWise + ' 1 ' + end.x + ' ' + end.y + ' L ' + innerEnd.x + ' ' + innerEnd.y + ' A ' + innerRadius + ' ' + innerRadius + ' 0 ' + clockWise + ' 0 ' + innerStart.x + ' ' + innerStart.y + ' Z';
    };
    SfCircularGauge.prototype.getRoundedPath = function (start, end, outerOldEnd, innerOldEnd, outerOldStart, innerOldStart, innerStart, innerEnd, radius, startRadius, endRadius, clockWise) {
      return 'M ' + start.x + ' ' + start.y + ' A ' + radius + ' ' + radius + ' 0 ' + clockWise + ' 1 ' + end.x + ' ' + end.y + ' C ' + outerOldEnd.x + ' ' + outerOldEnd.y + ' ' + innerOldEnd.x + ' ' + innerOldEnd.y + ' ' + innerEnd.x + ' ' + innerEnd.y + ' A ' + endRadius + ' ' + startRadius + ' 0 ' + clockWise + ' 0 ' + innerStart.x + ' ' + innerStart.y + ' C ' + innerOldStart.x + ' ' + innerOldStart.y + ' ' + outerOldStart.x + ' ' + outerOldStart.y + ' ' + start.x + ' ' + start.y + ' Z';
    };
    SfCircularGauge.prototype.getCompletePathArc = function (center, actualStart, actualEnd, radius, innerRadius, isClockwise) {
      actualEnd -= this.isCompleteAngle(actualStart, actualEnd) && !isClockwise && actualStart != actualEnd ? 0.0001 : 0;
      var roundDegree = this.getDegreeValue(actualStart, actualEnd);
      var degreeMidValue = 180;
      var clockWise = roundDegree < 180 && roundDegree > 0 ? 0 : roundDegree > degreeMidValue * 2 && roundDegree < degreeMidValue * 3 || actualStart > degreeMidValue * 3 + degreeMidValue / 2 ? 0 : 1;
      return this.getCompletePath(this.getLocationFromAngle(actualStart, radius, center), this.getLocationFromAngle(actualEnd, radius, center), radius, this.getLocationFromAngle(actualStart, innerRadius, center), this.getLocationFromAngle(actualEnd, innerRadius, center), innerRadius, clockWise);
    };
    SfCircularGauge.prototype.getRoundedPathArc = function (center, actualStart, actualEnd, oldStart, oldEnd, radius, startWidth, endWidth, roundedCornerRadius) {
      actualEnd -= this.isCompleteAngle(actualStart, actualEnd) ? 0.0001 : 0;
      var roundDegree = this.getDegreeValue(actualStart, actualEnd);
      startWidth = radius < startWidth ? radius : startWidth;
      endWidth = radius < endWidth ? radius : endWidth;
      var startRadius = radius - startWidth;
      var endRadius = radius - endWidth;
      var arcRadius = radius - (startWidth + endWidth) / 2;
      var degreeMidValue = 180;
      if (roundedCornerRadius) {
        oldEnd += radius >= startWidth ? roundedCornerRadius / radius : 0;
        oldStart -= radius >= startWidth ? roundedCornerRadius / radius : 0;
        actualStart += radius >= startWidth ? roundedCornerRadius / 2 : 0;
        actualEnd -= radius >= startWidth ? roundedCornerRadius / 2 : 0;
        degreeMidValue += roundedCornerRadius;
      }
      var clockWise = roundDegree <= degreeMidValue && roundDegree > 0 ? 0 : roundDegree > (degreeMidValue - roundedCornerRadius) * 2 && roundDegree < (degreeMidValue - roundedCornerRadius) * 3 || actualStart > (degreeMidValue - roundedCornerRadius) * 3 + (degreeMidValue - roundedCornerRadius) / 2 ? 0 : 1;
      return this.getRoundedPath(this.getLocationFromAngle(actualStart, radius, center), this.getLocationFromAngle(actualEnd, radius, center), this.getLocationFromAngle(oldEnd, radius, center), this.getLocationFromAngle(oldEnd, endRadius, center), this.getLocationFromAngle(oldStart, radius, center), this.getLocationFromAngle(oldStart, startRadius, center), this.getLocationFromAngle(actualStart, startRadius, center), this.getLocationFromAngle(actualEnd, endRadius, center), radius, arcRadius, arcRadius, clockWise);
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    SfCircularGauge.prototype.getMousePosition = function (pageX, pageY, element) {
      var elementRect = element.getBoundingClientRect();
      var pageXOffset = element.ownerDocument.defaultView.pageXOffset;
      var pageYOffset = element.ownerDocument.defaultView.pageYOffset;
      var clientTop = element.ownerDocument.documentElement.clientTop;
      var clientLeft = element.ownerDocument.documentElement.clientLeft;
      var positionX = elementRect.left + pageXOffset - clientLeft;
      var positionY = elementRect.top + pageYOffset - clientTop;
      return {
        x: pageX - positionX,
        y: pageY - positionY
      };
    };
    return SfCircularGauge;
  }();
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  var CircularGauge = {
    initialize: function initialize(element, options, dotnetRef, isFirstRender) {
      var instance = new SfCircularGauge(element.id, element, options, dotnetRef);
      instance.render();
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      var elementInfo = {
        height: 0,
        width: 0,
        isIE: false
      };
      if (isFirstRender) {
        var size = this.getContainerSize(element.id, dotnetRef);
        elementInfo.height = size.height;
        elementInfo.width = size.width;
      }
      elementInfo.isIE = sf.base.Browser.isIE;
      return elementInfo;
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getContainerSize: function getContainerSize(id, dotnetRef) {
      var elementBounds = document.getElementById(id);
      var width = elementBounds.clientWidth;
      var height = elementBounds.clientHeight;
      return {
        height: height,
        width: width
      };
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    animationProcess: function animationProcess(id, options, individualid) {
      var instance = window.sfBlazor.getCompInstance(id);
      if (instance && instance.element) {
        var pointerOptions = JSON.parse(options.pointerAnimation);
        for (var i = 0; i < pointerOptions.length; i++) {
          instance.pointerAnimation(pointerOptions[i]);
        }
      }
    },
    setPointerDragStatus: function setPointerDragStatus(id, enable) {
      var instance = window.sfBlazor.getCompInstance(id);
      if (instance && instance.element) {
        instance.options.enablePointerDrag = enable;
      }
    },
    setRangeDragStatus: function setRangeDragStatus(id, enable) {
      var instance = window.sfBlazor.getCompInstance(id);
      if (instance && instance.element) {
        instance.options.enableRangeDrag = enable;
      }
    },
    setLegendToggle: function setLegendToggle(id, enable) {
      var instance = window.sfBlazor.getCompInstance(id);
      if (instance && instance.element) {
        instance.options.legendToggleVisibility = enable;
      }
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    getElementBounds: function getElementBounds(id) {
      var htmlElement = document.getElementById(id);
      if (htmlElement) {
        var bounds = htmlElement.getBoundingClientRect();
        return {
          width: bounds.width,
          height: bounds.height,
          top: bounds.top,
          bottom: bounds.bottom,
          left: bounds.left,
          right: bounds.right
        };
      } else {
        return null;
      }
    },
    dispose: function dispose(id) {
      var instance = window.sfBlazor.getCompInstance(id);
      if (instance && instance.element) {
        instance.destroy();
      }
    }
  };
  return CircularGauge;
}();

/***/ })

}]);(async()=>{await import(`${document.baseURI}_content/Syncfusion.Blazor/scripts/syncfusion-blazor-base.min.js?v=19.3.1`).then(()=>{sfBlazor.loadDependencies('sfcirculargauge');})})();